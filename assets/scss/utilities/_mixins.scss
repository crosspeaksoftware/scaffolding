/******************************************************************
Site Name:
Author:

Stylesheet: Mixins & Constants Stylesheet

This is where you can take advantage of Sass' great features:
Mixins & Constants. I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques like gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

******************************************************************/

@use "sass:math";

//
// Clearfix
//

// http://nicolasgallagher.com/micro-clearfix-hack/
// @see _classes.scss
@mixin clearfix {
	zoom: 1;

	&:after,
	&:before {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}

//
// Alerts and Notices
//

@mixin alert {
	display: inline-flex;
	align-items: center;
	position: relative;
	padding: 1em 2em;
	margin: 0 0 2em;
	background-color: #EEE;
	border-top-width: 3px;
	border-top-style: solid;
	width: 100%;

	&:before {
		font-family: "Font Awesome 5 Free";
		font-weight: 900;
		font-size: 1.5em;
		display: inline-block;
		margin-right: 0.875em;
	}
}

//
// Alignment
//

// Vertical Align Dynamic Height
// http://css-tricks.com/centering-in-the-unknown/
@mixin dynamicVerticalAlign {
	&:before {
		content: '';
		display: inline-block;
		vertical-align: middle;
		height: 100%;
		width: .1px;
	}
}

//
// Typography
//

// Text Truncate
// values are: clip, ellipsis, or a string
@mixin truncateText($overflow: ellipsis) {
	overflow: hidden;
	text-overflow: $overflow;
	white-space: nowrap;
}


/// Container
//
// Generate semantic containers with these mixins.

@mixin make-container() {
	width: 100%;
	padding-right: math.div($grid-gutter-width, 2);
	padding-left: math.div($grid-gutter-width, 2);
	margin-right: auto;
	margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
}

//
// Media Queries
//

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
	$max: breakpoint-max($name, $breakpoints);
	@if $max {
		@media (max-width: $max) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($lower, $breakpoints);
	$max: breakpoint-max($upper, $breakpoints);

	@if $min != null and $max != null {
		@media (min-width: $min) and (max-width: $max) {
			@content;
		}
	} @else if $max == null {
		@include media-breakpoint-up($lower, $breakpoints) {
			@content;
		}
	} @else if $min == null {
		@include media-breakpoint-down($upper, $breakpoints) {
			@content;
		}
	}
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	$max: breakpoint-max($name, $breakpoints);

	@if $min != null and $max != null {
		@media (min-width: $min) and (max-width: $max) {
			@content;
		}
	} @else if $max == null {
		@include media-breakpoint-up($name, $breakpoints) {
			@content;
		}
	} @else if $min == null {
		@include media-breakpoint-down($name, $breakpoints) {
			@content;
		}
	}
}
